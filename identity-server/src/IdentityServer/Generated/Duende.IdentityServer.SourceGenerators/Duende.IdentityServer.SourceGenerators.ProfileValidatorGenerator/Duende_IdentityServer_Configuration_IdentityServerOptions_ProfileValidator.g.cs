// <auto-generated />
// Copyright (c) Duende Software. All rights reserved.
// See LICENSE in the project root for license information.

#nullable enable

using Microsoft.Extensions.Logging;
using Duende.IdentityServer.Configuration.Profiles;

namespace Duende.IdentityServer.Configuration;

/// <summary>
/// Auto-generated validator for IdentityServerOptions.
/// Provides strongly-typed property accessors for profile validation without reflection.
/// </summary>
public sealed class IdentityServerOptionsProfileValidator
{
    private readonly Duende.IdentityServer.Configuration.IdentityServerOptions _instance;
    private readonly ILogger _logger;
    private readonly bool _logOverrides;

    /// <summary>
    /// Initializes a new instance of the <see cref="IdentityServerOptionsProfileValidator"/> class.
    /// </summary>
    public IdentityServerOptionsProfileValidator(
        Duende.IdentityServer.Configuration.IdentityServerOptions instance,
        ILogger logger,
        bool logOverrides)
    {
        _instance = instance;
        _logger = logger;
        _logOverrides = logOverrides;
    }

    /// <summary>
    /// Gets a validator for the IssuerUri property.
    /// </summary>
    public ProfilePropertyValidator<string?> IssuerUri()
    {
        return new ProfilePropertyValidator<string?>(
            "IssuerUri",
            () => _instance.IssuerUri!,
            value => _instance.IssuerUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the LowerCaseIssuerUri property.
    /// </summary>
    public ProfilePropertyValidator<bool> LowerCaseIssuerUri()
    {
        return new ProfilePropertyValidator<bool>(
            "LowerCaseIssuerUri",
            () => _instance.LowerCaseIssuerUri!,
            value => _instance.LowerCaseIssuerUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AccessTokenJwtType property.
    /// </summary>
    public ProfilePropertyValidator<string> AccessTokenJwtType()
    {
        return new ProfilePropertyValidator<string>(
            "AccessTokenJwtType",
            () => _instance.AccessTokenJwtType!,
            value => _instance.AccessTokenJwtType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the LogoutTokenJwtType property.
    /// </summary>
    public ProfilePropertyValidator<string> LogoutTokenJwtType()
    {
        return new ProfilePropertyValidator<string>(
            "LogoutTokenJwtType",
            () => _instance.LogoutTokenJwtType!,
            value => _instance.LogoutTokenJwtType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the EmitStaticAudienceClaim property.
    /// </summary>
    public ProfilePropertyValidator<bool> EmitStaticAudienceClaim()
    {
        return new ProfilePropertyValidator<bool>(
            "EmitStaticAudienceClaim",
            () => _instance.EmitStaticAudienceClaim!,
            value => _instance.EmitStaticAudienceClaim = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the EmitScopesAsSpaceDelimitedStringInJwt property.
    /// </summary>
    public ProfilePropertyValidator<bool> EmitScopesAsSpaceDelimitedStringInJwt()
    {
        return new ProfilePropertyValidator<bool>(
            "EmitScopesAsSpaceDelimitedStringInJwt",
            () => _instance.EmitScopesAsSpaceDelimitedStringInJwt!,
            value => _instance.EmitScopesAsSpaceDelimitedStringInJwt = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the EmitIssuerIdentificationResponseParameter property.
    /// </summary>
    public ProfilePropertyValidator<bool> EmitIssuerIdentificationResponseParameter()
    {
        return new ProfilePropertyValidator<bool>(
            "EmitIssuerIdentificationResponseParameter",
            () => _instance.EmitIssuerIdentificationResponseParameter!,
            value => _instance.EmitIssuerIdentificationResponseParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the EmitStateHash property.
    /// </summary>
    public ProfilePropertyValidator<bool> EmitStateHash()
    {
        return new ProfilePropertyValidator<bool>(
            "EmitStateHash",
            () => _instance.EmitStateHash!,
            value => _instance.EmitStateHash = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the StrictJarValidation property.
    /// </summary>
    public ProfilePropertyValidator<bool> StrictJarValidation()
    {
        return new ProfilePropertyValidator<bool>(
            "StrictJarValidation",
            () => _instance.StrictJarValidation!,
            value => _instance.StrictJarValidation = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ValidateTenantOnAuthorization property.
    /// </summary>
    public ProfilePropertyValidator<bool> ValidateTenantOnAuthorization()
    {
        return new ProfilePropertyValidator<bool>(
            "ValidateTenantOnAuthorization",
            () => _instance.ValidateTenantOnAuthorization!,
            value => _instance.ValidateTenantOnAuthorization = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.EndpointsOptions> Endpoints()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.EndpointsOptions>(
            "Endpoints",
            () => _instance.Endpoints!,
            value => _instance.Endpoints = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableAuthorizeEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableAuthorizeEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableAuthorizeEndpoint",
            () => _instance.Endpoints.EnableAuthorizeEndpoint!,
            value => _instance.Endpoints.EnableAuthorizeEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableJwtRequestUri property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableJwtRequestUri()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableJwtRequestUri",
            () => _instance.Endpoints.EnableJwtRequestUri!,
            value => _instance.Endpoints.EnableJwtRequestUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableTokenEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableTokenEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableTokenEndpoint",
            () => _instance.Endpoints.EnableTokenEndpoint!,
            value => _instance.Endpoints.EnableTokenEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableUserInfoEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableUserInfoEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableUserInfoEndpoint",
            () => _instance.Endpoints.EnableUserInfoEndpoint!,
            value => _instance.Endpoints.EnableUserInfoEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableDiscoveryEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableDiscoveryEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableDiscoveryEndpoint",
            () => _instance.Endpoints.EnableDiscoveryEndpoint!,
            value => _instance.Endpoints.EnableDiscoveryEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableEndSessionEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableEndSessionEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableEndSessionEndpoint",
            () => _instance.Endpoints.EnableEndSessionEndpoint!,
            value => _instance.Endpoints.EnableEndSessionEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableCheckSessionEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableCheckSessionEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableCheckSessionEndpoint",
            () => _instance.Endpoints.EnableCheckSessionEndpoint!,
            value => _instance.Endpoints.EnableCheckSessionEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableTokenRevocationEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableTokenRevocationEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableTokenRevocationEndpoint",
            () => _instance.Endpoints.EnableTokenRevocationEndpoint!,
            value => _instance.Endpoints.EnableTokenRevocationEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableIntrospectionEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableIntrospectionEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableIntrospectionEndpoint",
            () => _instance.Endpoints.EnableIntrospectionEndpoint!,
            value => _instance.Endpoints.EnableIntrospectionEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableDeviceAuthorizationEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableDeviceAuthorizationEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableDeviceAuthorizationEndpoint",
            () => _instance.Endpoints.EnableDeviceAuthorizationEndpoint!,
            value => _instance.Endpoints.EnableDeviceAuthorizationEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableBackchannelAuthenticationEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableBackchannelAuthenticationEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableBackchannelAuthenticationEndpoint",
            () => _instance.Endpoints.EnableBackchannelAuthenticationEndpoint!,
            value => _instance.Endpoints.EnableBackchannelAuthenticationEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnablePushedAuthorizationEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnablePushedAuthorizationEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnablePushedAuthorizationEndpoint",
            () => _instance.Endpoints.EnablePushedAuthorizationEndpoint!,
            value => _instance.Endpoints.EnablePushedAuthorizationEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Endpoints.EnableOAuth2MetadataEndpoint property.
    /// </summary>
    public ProfilePropertyValidator<bool> EndpointsEnableOAuth2MetadataEndpoint()
    {
        return new ProfilePropertyValidator<bool>(
            "Endpoints.EnableOAuth2MetadataEndpoint",
            () => _instance.Endpoints.EnableOAuth2MetadataEndpoint!,
            value => _instance.Endpoints.EnableOAuth2MetadataEndpoint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.DiscoveryOptions> Discovery()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.DiscoveryOptions>(
            "Discovery",
            () => _instance.Discovery!,
            value => _instance.Discovery = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowEndpoints property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowEndpoints()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowEndpoints",
            () => _instance.Discovery.ShowEndpoints!,
            value => _instance.Discovery.ShowEndpoints = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowKeySet property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowKeySet()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowKeySet",
            () => _instance.Discovery.ShowKeySet!,
            value => _instance.Discovery.ShowKeySet = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowIdentityScopes property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowIdentityScopes()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowIdentityScopes",
            () => _instance.Discovery.ShowIdentityScopes!,
            value => _instance.Discovery.ShowIdentityScopes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowApiScopes property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowApiScopes()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowApiScopes",
            () => _instance.Discovery.ShowApiScopes!,
            value => _instance.Discovery.ShowApiScopes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowClaims property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowClaims()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowClaims",
            () => _instance.Discovery.ShowClaims!,
            value => _instance.Discovery.ShowClaims = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowResponseTypes property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowResponseTypes()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowResponseTypes",
            () => _instance.Discovery.ShowResponseTypes!,
            value => _instance.Discovery.ShowResponseTypes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowResponseModes property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowResponseModes()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowResponseModes",
            () => _instance.Discovery.ShowResponseModes!,
            value => _instance.Discovery.ShowResponseModes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowGrantTypes property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowGrantTypes()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowGrantTypes",
            () => _instance.Discovery.ShowGrantTypes!,
            value => _instance.Discovery.ShowGrantTypes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowExtensionGrantTypes property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowExtensionGrantTypes()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowExtensionGrantTypes",
            () => _instance.Discovery.ShowExtensionGrantTypes!,
            value => _instance.Discovery.ShowExtensionGrantTypes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ShowTokenEndpointAuthenticationMethods property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryShowTokenEndpointAuthenticationMethods()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ShowTokenEndpointAuthenticationMethods",
            () => _instance.Discovery.ShowTokenEndpointAuthenticationMethods!,
            value => _instance.Discovery.ShowTokenEndpointAuthenticationMethods = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ExpandRelativePathsInCustomEntries property.
    /// </summary>
    public ProfilePropertyValidator<bool> DiscoveryExpandRelativePathsInCustomEntries()
    {
        return new ProfilePropertyValidator<bool>(
            "Discovery.ExpandRelativePathsInCustomEntries",
            () => _instance.Discovery.ExpandRelativePathsInCustomEntries!,
            value => _instance.Discovery.ExpandRelativePathsInCustomEntries = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.ResponseCacheInterval property.
    /// </summary>
    public ProfilePropertyValidator<int?> DiscoveryResponseCacheInterval()
    {
        return new ProfilePropertyValidator<int?>(
            "Discovery.ResponseCacheInterval",
            () => _instance.Discovery.ResponseCacheInterval!,
            value => _instance.Discovery.ResponseCacheInterval = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Discovery.CustomEntries property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.Dictionary<string, object>> DiscoveryCustomEntries()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.Dictionary<string, object>>(
            "Discovery.CustomEntries",
            () => _instance.Discovery.CustomEntries!,
            value => _instance.Discovery.CustomEntries = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.AuthenticationOptions> Authentication()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.AuthenticationOptions>(
            "Authentication",
            () => _instance.Authentication!,
            value => _instance.Authentication = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CookieAuthenticationScheme property.
    /// </summary>
    public ProfilePropertyValidator<string?> AuthenticationCookieAuthenticationScheme()
    {
        return new ProfilePropertyValidator<string?>(
            "Authentication.CookieAuthenticationScheme",
            () => _instance.Authentication.CookieAuthenticationScheme!,
            value => _instance.Authentication.CookieAuthenticationScheme = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CookieLifetime property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> AuthenticationCookieLifetime()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Authentication.CookieLifetime",
            () => _instance.Authentication.CookieLifetime!,
            value => _instance.Authentication.CookieLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CookieSlidingExpiration property.
    /// </summary>
    public ProfilePropertyValidator<bool> AuthenticationCookieSlidingExpiration()
    {
        return new ProfilePropertyValidator<bool>(
            "Authentication.CookieSlidingExpiration",
            () => _instance.Authentication.CookieSlidingExpiration!,
            value => _instance.Authentication.CookieSlidingExpiration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CookieSameSiteMode property.
    /// </summary>
    public ProfilePropertyValidator<Microsoft.AspNetCore.Http.SameSiteMode> AuthenticationCookieSameSiteMode()
    {
        return new ProfilePropertyValidator<Microsoft.AspNetCore.Http.SameSiteMode>(
            "Authentication.CookieSameSiteMode",
            () => _instance.Authentication.CookieSameSiteMode!,
            value => _instance.Authentication.CookieSameSiteMode = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.RequireAuthenticatedUserForSignOutMessage property.
    /// </summary>
    public ProfilePropertyValidator<bool> AuthenticationRequireAuthenticatedUserForSignOutMessage()
    {
        return new ProfilePropertyValidator<bool>(
            "Authentication.RequireAuthenticatedUserForSignOutMessage",
            () => _instance.Authentication.RequireAuthenticatedUserForSignOutMessage!,
            value => _instance.Authentication.RequireAuthenticatedUserForSignOutMessage = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CheckSessionCookieName property.
    /// </summary>
    public ProfilePropertyValidator<string> AuthenticationCheckSessionCookieName()
    {
        return new ProfilePropertyValidator<string>(
            "Authentication.CheckSessionCookieName",
            () => _instance.Authentication.CheckSessionCookieName!,
            value => _instance.Authentication.CheckSessionCookieName = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CheckSessionCookieDomain property.
    /// </summary>
    public ProfilePropertyValidator<string?> AuthenticationCheckSessionCookieDomain()
    {
        return new ProfilePropertyValidator<string?>(
            "Authentication.CheckSessionCookieDomain",
            () => _instance.Authentication.CheckSessionCookieDomain!,
            value => _instance.Authentication.CheckSessionCookieDomain = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CheckSessionCookieSameSiteMode property.
    /// </summary>
    public ProfilePropertyValidator<Microsoft.AspNetCore.Http.SameSiteMode> AuthenticationCheckSessionCookieSameSiteMode()
    {
        return new ProfilePropertyValidator<Microsoft.AspNetCore.Http.SameSiteMode>(
            "Authentication.CheckSessionCookieSameSiteMode",
            () => _instance.Authentication.CheckSessionCookieSameSiteMode!,
            value => _instance.Authentication.CheckSessionCookieSameSiteMode = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.RequireCspFrameSrcForSignout property.
    /// </summary>
    public ProfilePropertyValidator<bool> AuthenticationRequireCspFrameSrcForSignout()
    {
        return new ProfilePropertyValidator<bool>(
            "Authentication.RequireCspFrameSrcForSignout",
            () => _instance.Authentication.RequireCspFrameSrcForSignout!,
            value => _instance.Authentication.RequireCspFrameSrcForSignout = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Authentication.CoordinateClientLifetimesWithUserSession property.
    /// </summary>
    public ProfilePropertyValidator<bool> AuthenticationCoordinateClientLifetimesWithUserSession()
    {
        return new ProfilePropertyValidator<bool>(
            "Authentication.CoordinateClientLifetimesWithUserSession",
            () => _instance.Authentication.CoordinateClientLifetimesWithUserSession!,
            value => _instance.Authentication.CoordinateClientLifetimesWithUserSession = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Events property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.EventsOptions> Events()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.EventsOptions>(
            "Events",
            () => _instance.Events!,
            value => _instance.Events = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Events.RaiseSuccessEvents property.
    /// </summary>
    public ProfilePropertyValidator<bool> EventsRaiseSuccessEvents()
    {
        return new ProfilePropertyValidator<bool>(
            "Events.RaiseSuccessEvents",
            () => _instance.Events.RaiseSuccessEvents!,
            value => _instance.Events.RaiseSuccessEvents = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Events.RaiseFailureEvents property.
    /// </summary>
    public ProfilePropertyValidator<bool> EventsRaiseFailureEvents()
    {
        return new ProfilePropertyValidator<bool>(
            "Events.RaiseFailureEvents",
            () => _instance.Events.RaiseFailureEvents!,
            value => _instance.Events.RaiseFailureEvents = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Events.RaiseInformationEvents property.
    /// </summary>
    public ProfilePropertyValidator<bool> EventsRaiseInformationEvents()
    {
        return new ProfilePropertyValidator<bool>(
            "Events.RaiseInformationEvents",
            () => _instance.Events.RaiseInformationEvents!,
            value => _instance.Events.RaiseInformationEvents = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Events.RaiseErrorEvents property.
    /// </summary>
    public ProfilePropertyValidator<bool> EventsRaiseErrorEvents()
    {
        return new ProfilePropertyValidator<bool>(
            "Events.RaiseErrorEvents",
            () => _instance.Events.RaiseErrorEvents!,
            value => _instance.Events.RaiseErrorEvents = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.InputLengthRestrictions> InputLengthRestrictions()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.InputLengthRestrictions>(
            "InputLengthRestrictions",
            () => _instance.InputLengthRestrictions!,
            value => _instance.InputLengthRestrictions = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.ClientId property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsClientId()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.ClientId",
            () => _instance.InputLengthRestrictions.ClientId!,
            value => _instance.InputLengthRestrictions.ClientId = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.ClientSecret property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsClientSecret()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.ClientSecret",
            () => _instance.InputLengthRestrictions.ClientSecret!,
            value => _instance.InputLengthRestrictions.ClientSecret = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.Scope property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsScope()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.Scope",
            () => _instance.InputLengthRestrictions.Scope!,
            value => _instance.InputLengthRestrictions.Scope = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.RedirectUri property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsRedirectUri()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.RedirectUri",
            () => _instance.InputLengthRestrictions.RedirectUri!,
            value => _instance.InputLengthRestrictions.RedirectUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.Nonce property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsNonce()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.Nonce",
            () => _instance.InputLengthRestrictions.Nonce!,
            value => _instance.InputLengthRestrictions.Nonce = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.UiLocale property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsUiLocale()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.UiLocale",
            () => _instance.InputLengthRestrictions.UiLocale!,
            value => _instance.InputLengthRestrictions.UiLocale = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.LoginHint property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsLoginHint()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.LoginHint",
            () => _instance.InputLengthRestrictions.LoginHint!,
            value => _instance.InputLengthRestrictions.LoginHint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.AcrValues property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsAcrValues()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.AcrValues",
            () => _instance.InputLengthRestrictions.AcrValues!,
            value => _instance.InputLengthRestrictions.AcrValues = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.GrantType property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsGrantType()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.GrantType",
            () => _instance.InputLengthRestrictions.GrantType!,
            value => _instance.InputLengthRestrictions.GrantType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.UserName property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsUserName()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.UserName",
            () => _instance.InputLengthRestrictions.UserName!,
            value => _instance.InputLengthRestrictions.UserName = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.Password property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsPassword()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.Password",
            () => _instance.InputLengthRestrictions.Password!,
            value => _instance.InputLengthRestrictions.Password = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.CspReport property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsCspReport()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.CspReport",
            () => _instance.InputLengthRestrictions.CspReport!,
            value => _instance.InputLengthRestrictions.CspReport = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.IdentityProvider property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsIdentityProvider()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.IdentityProvider",
            () => _instance.InputLengthRestrictions.IdentityProvider!,
            value => _instance.InputLengthRestrictions.IdentityProvider = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.ExternalError property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsExternalError()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.ExternalError",
            () => _instance.InputLengthRestrictions.ExternalError!,
            value => _instance.InputLengthRestrictions.ExternalError = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.AuthorizationCode property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsAuthorizationCode()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.AuthorizationCode",
            () => _instance.InputLengthRestrictions.AuthorizationCode!,
            value => _instance.InputLengthRestrictions.AuthorizationCode = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.DeviceCode property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsDeviceCode()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.DeviceCode",
            () => _instance.InputLengthRestrictions.DeviceCode!,
            value => _instance.InputLengthRestrictions.DeviceCode = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.RefreshToken property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsRefreshToken()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.RefreshToken",
            () => _instance.InputLengthRestrictions.RefreshToken!,
            value => _instance.InputLengthRestrictions.RefreshToken = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.TokenHandle property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsTokenHandle()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.TokenHandle",
            () => _instance.InputLengthRestrictions.TokenHandle!,
            value => _instance.InputLengthRestrictions.TokenHandle = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.Jwt property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsJwt()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.Jwt",
            () => _instance.InputLengthRestrictions.Jwt!,
            value => _instance.InputLengthRestrictions.Jwt = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.BindingMessage property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsBindingMessage()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.BindingMessage",
            () => _instance.InputLengthRestrictions.BindingMessage!,
            value => _instance.InputLengthRestrictions.BindingMessage = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.UserCode property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsUserCode()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.UserCode",
            () => _instance.InputLengthRestrictions.UserCode!,
            value => _instance.InputLengthRestrictions.UserCode = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.IdTokenHint property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsIdTokenHint()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.IdTokenHint",
            () => _instance.InputLengthRestrictions.IdTokenHint!,
            value => _instance.InputLengthRestrictions.IdTokenHint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.LoginHintToken property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsLoginHintToken()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.LoginHintToken",
            () => _instance.InputLengthRestrictions.LoginHintToken!,
            value => _instance.InputLengthRestrictions.LoginHintToken = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.AuthenticationRequestId property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsAuthenticationRequestId()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.AuthenticationRequestId",
            () => _instance.InputLengthRestrictions.AuthenticationRequestId!,
            value => _instance.InputLengthRestrictions.AuthenticationRequestId = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.DPoPKeyThumbprint property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsDPoPKeyThumbprint()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.DPoPKeyThumbprint",
            () => _instance.InputLengthRestrictions.DPoPKeyThumbprint!,
            value => _instance.InputLengthRestrictions.DPoPKeyThumbprint = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InputLengthRestrictions.DPoPProofToken property.
    /// </summary>
    public ProfilePropertyValidator<int> InputLengthRestrictionsDPoPProofToken()
    {
        return new ProfilePropertyValidator<int>(
            "InputLengthRestrictions.DPoPProofToken",
            () => _instance.InputLengthRestrictions.DPoPProofToken!,
            value => _instance.InputLengthRestrictions.DPoPProofToken = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.UserInteractionOptions> UserInteraction()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.UserInteractionOptions>(
            "UserInteraction",
            () => _instance.UserInteraction!,
            value => _instance.UserInteraction = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.LoginUrl property.
    /// </summary>
    public ProfilePropertyValidator<string?> UserInteractionLoginUrl()
    {
        return new ProfilePropertyValidator<string?>(
            "UserInteraction.LoginUrl",
            () => _instance.UserInteraction.LoginUrl!,
            value => _instance.UserInteraction.LoginUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.LoginReturnUrlParameter property.
    /// </summary>
    public ProfilePropertyValidator<string?> UserInteractionLoginReturnUrlParameter()
    {
        return new ProfilePropertyValidator<string?>(
            "UserInteraction.LoginReturnUrlParameter",
            () => _instance.UserInteraction.LoginReturnUrlParameter!,
            value => _instance.UserInteraction.LoginReturnUrlParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.LogoutUrl property.
    /// </summary>
    public ProfilePropertyValidator<string?> UserInteractionLogoutUrl()
    {
        return new ProfilePropertyValidator<string?>(
            "UserInteraction.LogoutUrl",
            () => _instance.UserInteraction.LogoutUrl!,
            value => _instance.UserInteraction.LogoutUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.LogoutIdParameter property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionLogoutIdParameter()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.LogoutIdParameter",
            () => _instance.UserInteraction.LogoutIdParameter!,
            value => _instance.UserInteraction.LogoutIdParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.ConsentUrl property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionConsentUrl()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.ConsentUrl",
            () => _instance.UserInteraction.ConsentUrl!,
            value => _instance.UserInteraction.ConsentUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.ConsentReturnUrlParameter property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionConsentReturnUrlParameter()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.ConsentReturnUrlParameter",
            () => _instance.UserInteraction.ConsentReturnUrlParameter!,
            value => _instance.UserInteraction.ConsentReturnUrlParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.CreateAccountUrl property.
    /// </summary>
    public ProfilePropertyValidator<string?> UserInteractionCreateAccountUrl()
    {
        return new ProfilePropertyValidator<string?>(
            "UserInteraction.CreateAccountUrl",
            () => _instance.UserInteraction.CreateAccountUrl!,
            value => _instance.UserInteraction.CreateAccountUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.CreateAccountReturnUrlParameter property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionCreateAccountReturnUrlParameter()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.CreateAccountReturnUrlParameter",
            () => _instance.UserInteraction.CreateAccountReturnUrlParameter!,
            value => _instance.UserInteraction.CreateAccountReturnUrlParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.ErrorUrl property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionErrorUrl()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.ErrorUrl",
            () => _instance.UserInteraction.ErrorUrl!,
            value => _instance.UserInteraction.ErrorUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.ErrorIdParameter property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionErrorIdParameter()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.ErrorIdParameter",
            () => _instance.UserInteraction.ErrorIdParameter!,
            value => _instance.UserInteraction.ErrorIdParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.CustomRedirectReturnUrlParameter property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionCustomRedirectReturnUrlParameter()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.CustomRedirectReturnUrlParameter",
            () => _instance.UserInteraction.CustomRedirectReturnUrlParameter!,
            value => _instance.UserInteraction.CustomRedirectReturnUrlParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.CookieMessageThreshold property.
    /// </summary>
    public ProfilePropertyValidator<int> UserInteractionCookieMessageThreshold()
    {
        return new ProfilePropertyValidator<int>(
            "UserInteraction.CookieMessageThreshold",
            () => _instance.UserInteraction.CookieMessageThreshold!,
            value => _instance.UserInteraction.CookieMessageThreshold = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.DeviceVerificationUrl property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionDeviceVerificationUrl()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.DeviceVerificationUrl",
            () => _instance.UserInteraction.DeviceVerificationUrl!,
            value => _instance.UserInteraction.DeviceVerificationUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.DeviceVerificationUserCodeParameter property.
    /// </summary>
    public ProfilePropertyValidator<string> UserInteractionDeviceVerificationUserCodeParameter()
    {
        return new ProfilePropertyValidator<string>(
            "UserInteraction.DeviceVerificationUserCodeParameter",
            () => _instance.UserInteraction.DeviceVerificationUserCodeParameter!,
            value => _instance.UserInteraction.DeviceVerificationUserCodeParameter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.AllowOriginInReturnUrl property.
    /// </summary>
    public ProfilePropertyValidator<bool> UserInteractionAllowOriginInReturnUrl()
    {
        return new ProfilePropertyValidator<bool>(
            "UserInteraction.AllowOriginInReturnUrl",
            () => _instance.UserInteraction.AllowOriginInReturnUrl!,
            value => _instance.UserInteraction.AllowOriginInReturnUrl = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserInteraction.PromptValuesSupported property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> UserInteractionPromptValuesSupported()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "UserInteraction.PromptValuesSupported",
            () => _instance.UserInteraction.PromptValuesSupported!,
            value => _instance.UserInteraction.PromptValuesSupported = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Caching property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.CachingOptions> Caching()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.CachingOptions>(
            "Caching",
            () => _instance.Caching!,
            value => _instance.Caching = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Caching.ClientStoreExpiration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> CachingClientStoreExpiration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Caching.ClientStoreExpiration",
            () => _instance.Caching.ClientStoreExpiration!,
            value => _instance.Caching.ClientStoreExpiration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Caching.ResourceStoreExpiration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> CachingResourceStoreExpiration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Caching.ResourceStoreExpiration",
            () => _instance.Caching.ResourceStoreExpiration!,
            value => _instance.Caching.ResourceStoreExpiration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Caching.CorsExpiration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> CachingCorsExpiration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Caching.CorsExpiration",
            () => _instance.Caching.CorsExpiration!,
            value => _instance.Caching.CorsExpiration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Caching.IdentityProviderCacheDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> CachingIdentityProviderCacheDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Caching.IdentityProviderCacheDuration",
            () => _instance.Caching.IdentityProviderCacheDuration!,
            value => _instance.Caching.IdentityProviderCacheDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Caching.CacheLockTimeout property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> CachingCacheLockTimeout()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Caching.CacheLockTimeout",
            () => _instance.Caching.CacheLockTimeout!,
            value => _instance.Caching.CacheLockTimeout = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Cors property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.CorsOptions> Cors()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.CorsOptions>(
            "Cors",
            () => _instance.Cors!,
            value => _instance.Cors = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Cors.CorsPolicyName property.
    /// </summary>
    public ProfilePropertyValidator<string> CorsCorsPolicyName()
    {
        return new ProfilePropertyValidator<string>(
            "Cors.CorsPolicyName",
            () => _instance.Cors.CorsPolicyName!,
            value => _instance.Cors.CorsPolicyName = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Cors.PreflightCacheDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan?> CorsPreflightCacheDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan?>(
            "Cors.PreflightCacheDuration",
            () => _instance.Cors.PreflightCacheDuration!,
            value => _instance.Cors.PreflightCacheDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Cors.CorsPaths property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<Microsoft.AspNetCore.Http.PathString>> CorsCorsPaths()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<Microsoft.AspNetCore.Http.PathString>>(
            "Cors.CorsPaths",
            () => _instance.Cors.CorsPaths!,
            value => _instance.Cors.CorsPaths = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Csp property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.CspOptions> Csp()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.CspOptions>(
            "Csp",
            () => _instance.Csp!,
            value => _instance.Csp = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Csp.Level property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Models.CspLevel> CspLevel()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Models.CspLevel>(
            "Csp.Level",
            () => _instance.Csp.Level!,
            value => _instance.Csp.Level = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Csp.AddDeprecatedHeader property.
    /// </summary>
    public ProfilePropertyValidator<bool> CspAddDeprecatedHeader()
    {
        return new ProfilePropertyValidator<bool>(
            "Csp.AddDeprecatedHeader",
            () => _instance.Csp.AddDeprecatedHeader!,
            value => _instance.Csp.AddDeprecatedHeader = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Validation property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.ValidationOptions> Validation()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.ValidationOptions>(
            "Validation",
            () => _instance.Validation!,
            value => _instance.Validation = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DeviceFlow property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.DeviceFlowOptions> DeviceFlow()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.DeviceFlowOptions>(
            "DeviceFlow",
            () => _instance.DeviceFlow!,
            value => _instance.DeviceFlow = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DeviceFlow.DefaultUserCodeType property.
    /// </summary>
    public ProfilePropertyValidator<string> DeviceFlowDefaultUserCodeType()
    {
        return new ProfilePropertyValidator<string>(
            "DeviceFlow.DefaultUserCodeType",
            () => _instance.DeviceFlow.DefaultUserCodeType!,
            value => _instance.DeviceFlow.DefaultUserCodeType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DeviceFlow.Interval property.
    /// </summary>
    public ProfilePropertyValidator<int> DeviceFlowInterval()
    {
        return new ProfilePropertyValidator<int>(
            "DeviceFlow.Interval",
            () => _instance.DeviceFlow.Interval!,
            value => _instance.DeviceFlow.Interval = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Ciba property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.CibaOptions> Ciba()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.CibaOptions>(
            "Ciba",
            () => _instance.Ciba!,
            value => _instance.Ciba = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Ciba.DefaultLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> CibaDefaultLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "Ciba.DefaultLifetime",
            () => _instance.Ciba.DefaultLifetime!,
            value => _instance.Ciba.DefaultLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Ciba.DefaultPollingInterval property.
    /// </summary>
    public ProfilePropertyValidator<int> CibaDefaultPollingInterval()
    {
        return new ProfilePropertyValidator<int>(
            "Ciba.DefaultPollingInterval",
            () => _instance.Ciba.DefaultPollingInterval!,
            value => _instance.Ciba.DefaultPollingInterval = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Logging property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.LoggingOptions> Logging()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.LoggingOptions>(
            "Logging",
            () => _instance.Logging!,
            value => _instance.Logging = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Logging.BackchannelAuthenticationRequestSensitiveValuesFilter property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> LoggingBackchannelAuthenticationRequestSensitiveValuesFilter()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "Logging.BackchannelAuthenticationRequestSensitiveValuesFilter",
            () => _instance.Logging.BackchannelAuthenticationRequestSensitiveValuesFilter!,
            value => _instance.Logging.BackchannelAuthenticationRequestSensitiveValuesFilter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Logging.TokenRequestSensitiveValuesFilter property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> LoggingTokenRequestSensitiveValuesFilter()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "Logging.TokenRequestSensitiveValuesFilter",
            () => _instance.Logging.TokenRequestSensitiveValuesFilter!,
            value => _instance.Logging.TokenRequestSensitiveValuesFilter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Logging.AuthorizeRequestSensitiveValuesFilter property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> LoggingAuthorizeRequestSensitiveValuesFilter()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "Logging.AuthorizeRequestSensitiveValuesFilter",
            () => _instance.Logging.AuthorizeRequestSensitiveValuesFilter!,
            value => _instance.Logging.AuthorizeRequestSensitiveValuesFilter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Logging.PushedAuthorizationSensitiveValuesFilter property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> LoggingPushedAuthorizationSensitiveValuesFilter()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "Logging.PushedAuthorizationSensitiveValuesFilter",
            () => _instance.Logging.PushedAuthorizationSensitiveValuesFilter!,
            value => _instance.Logging.PushedAuthorizationSensitiveValuesFilter = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the MutualTls property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.MutualTlsOptions> MutualTls()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.MutualTlsOptions>(
            "MutualTls",
            () => _instance.MutualTls!,
            value => _instance.MutualTls = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the MutualTls.Enabled property.
    /// </summary>
    public ProfilePropertyValidator<bool> MutualTlsEnabled()
    {
        return new ProfilePropertyValidator<bool>(
            "MutualTls.Enabled",
            () => _instance.MutualTls.Enabled!,
            value => _instance.MutualTls.Enabled = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the MutualTls.ClientCertificateAuthenticationScheme property.
    /// </summary>
    public ProfilePropertyValidator<string> MutualTlsClientCertificateAuthenticationScheme()
    {
        return new ProfilePropertyValidator<string>(
            "MutualTls.ClientCertificateAuthenticationScheme",
            () => _instance.MutualTls.ClientCertificateAuthenticationScheme!,
            value => _instance.MutualTls.ClientCertificateAuthenticationScheme = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the MutualTls.DomainName property.
    /// </summary>
    public ProfilePropertyValidator<string?> MutualTlsDomainName()
    {
        return new ProfilePropertyValidator<string?>(
            "MutualTls.DomainName",
            () => _instance.MutualTls.DomainName!,
            value => _instance.MutualTls.DomainName = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the MutualTls.AlwaysEmitConfirmationClaim property.
    /// </summary>
    public ProfilePropertyValidator<bool> MutualTlsAlwaysEmitConfirmationClaim()
    {
        return new ProfilePropertyValidator<bool>(
            "MutualTls.AlwaysEmitConfirmationClaim",
            () => _instance.MutualTls.AlwaysEmitConfirmationClaim!,
            value => _instance.MutualTls.AlwaysEmitConfirmationClaim = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.KeyManagementOptions> KeyManagement()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.KeyManagementOptions>(
            "KeyManagement",
            () => _instance.KeyManagement!,
            value => _instance.KeyManagement = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.Enabled property.
    /// </summary>
    public ProfilePropertyValidator<bool> KeyManagementEnabled()
    {
        return new ProfilePropertyValidator<bool>(
            "KeyManagement.Enabled",
            () => _instance.KeyManagement.Enabled!,
            value => _instance.KeyManagement.Enabled = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.RsaKeySize property.
    /// </summary>
    public ProfilePropertyValidator<int> KeyManagementRsaKeySize()
    {
        return new ProfilePropertyValidator<int>(
            "KeyManagement.RsaKeySize",
            () => _instance.KeyManagement.RsaKeySize!,
            value => _instance.KeyManagement.RsaKeySize = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.SigningAlgorithms property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<Duende.IdentityServer.Configuration.SigningAlgorithmOptions>> KeyManagementSigningAlgorithms()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<Duende.IdentityServer.Configuration.SigningAlgorithmOptions>>(
            "KeyManagement.SigningAlgorithms",
            () => _instance.KeyManagement.SigningAlgorithms!,
            value => _instance.KeyManagement.SigningAlgorithms = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.InitializationDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementInitializationDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.InitializationDuration",
            () => _instance.KeyManagement.InitializationDuration!,
            value => _instance.KeyManagement.InitializationDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.InitializationSynchronizationDelay property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementInitializationSynchronizationDelay()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.InitializationSynchronizationDelay",
            () => _instance.KeyManagement.InitializationSynchronizationDelay!,
            value => _instance.KeyManagement.InitializationSynchronizationDelay = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.InitializationKeyCacheDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementInitializationKeyCacheDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.InitializationKeyCacheDuration",
            () => _instance.KeyManagement.InitializationKeyCacheDuration!,
            value => _instance.KeyManagement.InitializationKeyCacheDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.KeyCacheDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementKeyCacheDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.KeyCacheDuration",
            () => _instance.KeyManagement.KeyCacheDuration!,
            value => _instance.KeyManagement.KeyCacheDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.PropagationTime property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementPropagationTime()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.PropagationTime",
            () => _instance.KeyManagement.PropagationTime!,
            value => _instance.KeyManagement.PropagationTime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.RotationInterval property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementRotationInterval()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.RotationInterval",
            () => _instance.KeyManagement.RotationInterval!,
            value => _instance.KeyManagement.RotationInterval = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.RetentionDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> KeyManagementRetentionDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "KeyManagement.RetentionDuration",
            () => _instance.KeyManagement.RetentionDuration!,
            value => _instance.KeyManagement.RetentionDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.DeleteRetiredKeys property.
    /// </summary>
    public ProfilePropertyValidator<bool> KeyManagementDeleteRetiredKeys()
    {
        return new ProfilePropertyValidator<bool>(
            "KeyManagement.DeleteRetiredKeys",
            () => _instance.KeyManagement.DeleteRetiredKeys!,
            value => _instance.KeyManagement.DeleteRetiredKeys = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.DataProtectKeys property.
    /// </summary>
    public ProfilePropertyValidator<bool> KeyManagementDataProtectKeys()
    {
        return new ProfilePropertyValidator<bool>(
            "KeyManagement.DataProtectKeys",
            () => _instance.KeyManagement.DataProtectKeys!,
            value => _instance.KeyManagement.DataProtectKeys = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the KeyManagement.KeyPath property.
    /// </summary>
    public ProfilePropertyValidator<string> KeyManagementKeyPath()
    {
        return new ProfilePropertyValidator<string>(
            "KeyManagement.KeyPath",
            () => _instance.KeyManagement.KeyPath!,
            value => _instance.KeyManagement.KeyPath = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PersistentGrants property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Stores.Serialization.PersistentGrantOptions> PersistentGrants()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Stores.Serialization.PersistentGrantOptions>(
            "PersistentGrants",
            () => _instance.PersistentGrants!,
            value => _instance.PersistentGrants = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PersistentGrants.DataProtectData property.
    /// </summary>
    public ProfilePropertyValidator<bool> PersistentGrantsDataProtectData()
    {
        return new ProfilePropertyValidator<bool>(
            "PersistentGrants.DataProtectData",
            () => _instance.PersistentGrants.DataProtectData!,
            value => _instance.PersistentGrants.DataProtectData = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PersistentGrants.DeleteOneTimeOnlyRefreshTokensOnUse property.
    /// </summary>
    public ProfilePropertyValidator<bool> PersistentGrantsDeleteOneTimeOnlyRefreshTokensOnUse()
    {
        return new ProfilePropertyValidator<bool>(
            "PersistentGrants.DeleteOneTimeOnlyRefreshTokensOnUse",
            () => _instance.PersistentGrants.DeleteOneTimeOnlyRefreshTokensOnUse!,
            value => _instance.PersistentGrants.DeleteOneTimeOnlyRefreshTokensOnUse = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DPoP property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.DPoPOptions> DPoP()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.DPoPOptions>(
            "DPoP",
            () => _instance.DPoP!,
            value => _instance.DPoP = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DPoP.ProofTokenValidityDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> DPoPProofTokenValidityDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "DPoP.ProofTokenValidityDuration",
            () => _instance.DPoP.ProofTokenValidityDuration!,
            value => _instance.DPoP.ProofTokenValidityDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DPoP.ServerClockSkew property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> DPoPServerClockSkew()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "DPoP.ServerClockSkew",
            () => _instance.DPoP.ServerClockSkew!,
            value => _instance.DPoP.ServerClockSkew = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DPoP.SupportedDPoPSigningAlgorithms property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> DPoPSupportedDPoPSigningAlgorithms()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "DPoP.SupportedDPoPSigningAlgorithms",
            () => _instance.DPoP.SupportedDPoPSigningAlgorithms!,
            value => _instance.DPoP.SupportedDPoPSigningAlgorithms = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the LicenseKey property.
    /// </summary>
    public ProfilePropertyValidator<string?> LicenseKey()
    {
        return new ProfilePropertyValidator<string?>(
            "LicenseKey",
            () => _instance.LicenseKey!,
            value => _instance.LicenseKey = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DynamicProviders property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.DynamicProviderOptions> DynamicProviders()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.DynamicProviderOptions>(
            "DynamicProviders",
            () => _instance.DynamicProviders!,
            value => _instance.DynamicProviders = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DynamicProviders.PathPrefix property.
    /// </summary>
    public ProfilePropertyValidator<Microsoft.AspNetCore.Http.PathString> DynamicProvidersPathPrefix()
    {
        return new ProfilePropertyValidator<Microsoft.AspNetCore.Http.PathString>(
            "DynamicProviders.PathPrefix",
            () => _instance.DynamicProviders.PathPrefix!,
            value => _instance.DynamicProviders.PathPrefix = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DynamicProviders.PathMatchingCallback property.
    /// </summary>
    public ProfilePropertyValidator<System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.Task<string?>>?> DynamicProvidersPathMatchingCallback()
    {
        return new ProfilePropertyValidator<System.Func<Microsoft.AspNetCore.Http.HttpContext, System.Threading.Tasks.Task<string?>>?>(
            "DynamicProviders.PathMatchingCallback",
            () => _instance.DynamicProviders.PathMatchingCallback!,
            value => _instance.DynamicProviders.PathMatchingCallback = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DynamicProviders.SignInScheme property.
    /// </summary>
    public ProfilePropertyValidator<string> DynamicProvidersSignInScheme()
    {
        return new ProfilePropertyValidator<string>(
            "DynamicProviders.SignInScheme",
            () => _instance.DynamicProviders.SignInScheme!,
            value => _instance.DynamicProviders.SignInScheme = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DynamicProviders.SignOutScheme property.
    /// </summary>
    public ProfilePropertyValidator<string> DynamicProvidersSignOutScheme()
    {
        return new ProfilePropertyValidator<string>(
            "DynamicProviders.SignOutScheme",
            () => _instance.DynamicProviders.SignOutScheme!,
            value => _instance.DynamicProviders.SignOutScheme = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.ServerSideSessionOptions> ServerSideSessions()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.ServerSideSessionOptions>(
            "ServerSideSessions",
            () => _instance.ServerSideSessions!,
            value => _instance.ServerSideSessions = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions.UserDisplayNameClaimType property.
    /// </summary>
    public ProfilePropertyValidator<string?> ServerSideSessionsUserDisplayNameClaimType()
    {
        return new ProfilePropertyValidator<string?>(
            "ServerSideSessions.UserDisplayNameClaimType",
            () => _instance.ServerSideSessions.UserDisplayNameClaimType!,
            value => _instance.ServerSideSessions.UserDisplayNameClaimType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions.RemoveExpiredSessions property.
    /// </summary>
    public ProfilePropertyValidator<bool> ServerSideSessionsRemoveExpiredSessions()
    {
        return new ProfilePropertyValidator<bool>(
            "ServerSideSessions.RemoveExpiredSessions",
            () => _instance.ServerSideSessions.RemoveExpiredSessions!,
            value => _instance.ServerSideSessions.RemoveExpiredSessions = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions.ExpiredSessionsTriggerBackchannelLogout property.
    /// </summary>
    public ProfilePropertyValidator<bool> ServerSideSessionsExpiredSessionsTriggerBackchannelLogout()
    {
        return new ProfilePropertyValidator<bool>(
            "ServerSideSessions.ExpiredSessionsTriggerBackchannelLogout",
            () => _instance.ServerSideSessions.ExpiredSessionsTriggerBackchannelLogout!,
            value => _instance.ServerSideSessions.ExpiredSessionsTriggerBackchannelLogout = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions.RemoveExpiredSessionsFrequency property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> ServerSideSessionsRemoveExpiredSessionsFrequency()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "ServerSideSessions.RemoveExpiredSessionsFrequency",
            () => _instance.ServerSideSessions.RemoveExpiredSessionsFrequency!,
            value => _instance.ServerSideSessions.RemoveExpiredSessionsFrequency = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions.FuzzExpiredSessionRemovalStart property.
    /// </summary>
    public ProfilePropertyValidator<bool> ServerSideSessionsFuzzExpiredSessionRemovalStart()
    {
        return new ProfilePropertyValidator<bool>(
            "ServerSideSessions.FuzzExpiredSessionRemovalStart",
            () => _instance.ServerSideSessions.FuzzExpiredSessionRemovalStart!,
            value => _instance.ServerSideSessions.FuzzExpiredSessionRemovalStart = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ServerSideSessions.RemoveExpiredSessionsBatchSize property.
    /// </summary>
    public ProfilePropertyValidator<int> ServerSideSessionsRemoveExpiredSessionsBatchSize()
    {
        return new ProfilePropertyValidator<int>(
            "ServerSideSessions.RemoveExpiredSessionsBatchSize",
            () => _instance.ServerSideSessions.RemoveExpiredSessionsBatchSize!,
            value => _instance.ServerSideSessions.RemoveExpiredSessionsBatchSize = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PushedAuthorization property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.PushedAuthorizationOptions> PushedAuthorization()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.PushedAuthorizationOptions>(
            "PushedAuthorization",
            () => _instance.PushedAuthorization!,
            value => _instance.PushedAuthorization = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PushedAuthorization.Required property.
    /// </summary>
    public ProfilePropertyValidator<bool> PushedAuthorizationRequired()
    {
        return new ProfilePropertyValidator<bool>(
            "PushedAuthorization.Required",
            () => _instance.PushedAuthorization.Required!,
            value => _instance.PushedAuthorization.Required = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PushedAuthorization.Lifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> PushedAuthorizationLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "PushedAuthorization.Lifetime",
            () => _instance.PushedAuthorization.Lifetime!,
            value => _instance.PushedAuthorization.Lifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PushedAuthorization.AllowUnregisteredPushedRedirectUris property.
    /// </summary>
    public ProfilePropertyValidator<bool> PushedAuthorizationAllowUnregisteredPushedRedirectUris()
    {
        return new ProfilePropertyValidator<bool>(
            "PushedAuthorization.AllowUnregisteredPushedRedirectUris",
            () => _instance.PushedAuthorization.AllowUnregisteredPushedRedirectUris!,
            value => _instance.PushedAuthorization.AllowUnregisteredPushedRedirectUris = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the JwtValidationClockSkew property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> JwtValidationClockSkew()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "JwtValidationClockSkew",
            () => _instance.JwtValidationClockSkew!,
            value => _instance.JwtValidationClockSkew = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the SupportedRequestObjectSigningAlgorithms property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> SupportedRequestObjectSigningAlgorithms()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "SupportedRequestObjectSigningAlgorithms",
            () => _instance.SupportedRequestObjectSigningAlgorithms!,
            value => _instance.SupportedRequestObjectSigningAlgorithms = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the SupportedClientAssertionSigningAlgorithms property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> SupportedClientAssertionSigningAlgorithms()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "SupportedClientAssertionSigningAlgorithms",
            () => _instance.SupportedClientAssertionSigningAlgorithms!,
            value => _instance.SupportedClientAssertionSigningAlgorithms = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Preview property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.PreviewFeatureOptions> Preview()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.PreviewFeatureOptions>(
            "Preview",
            () => _instance.Preview!,
            value => _instance.Preview = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Preview.EnableDiscoveryDocumentCache property.
    /// </summary>
    public ProfilePropertyValidator<bool> PreviewEnableDiscoveryDocumentCache()
    {
        return new ProfilePropertyValidator<bool>(
            "Preview.EnableDiscoveryDocumentCache",
            () => _instance.Preview.EnableDiscoveryDocumentCache!,
            value => _instance.Preview.EnableDiscoveryDocumentCache = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Preview.StrictClientAssertionAudienceValidation property.
    /// </summary>
    public ProfilePropertyValidator<bool> PreviewStrictClientAssertionAudienceValidation()
    {
        return new ProfilePropertyValidator<bool>(
            "Preview.StrictClientAssertionAudienceValidation",
            () => _instance.Preview.StrictClientAssertionAudienceValidation!,
            value => _instance.Preview.StrictClientAssertionAudienceValidation = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Preview.DiscoveryDocumentCacheDuration property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> PreviewDiscoveryDocumentCacheDuration()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Preview.DiscoveryDocumentCacheDuration",
            () => _instance.Preview.DiscoveryDocumentCacheDuration!,
            value => _instance.Preview.DiscoveryDocumentCacheDuration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Diagnostics property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.DiagnosticOptions> Diagnostics()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.DiagnosticOptions>(
            "Diagnostics",
            () => _instance.Diagnostics!,
            value => _instance.Diagnostics = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Diagnostics.LogFrequency property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> DiagnosticsLogFrequency()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "Diagnostics.LogFrequency",
            () => _instance.Diagnostics.LogFrequency!,
            value => _instance.Diagnostics.LogFrequency = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Diagnostics.ChunkSize property.
    /// </summary>
    public ProfilePropertyValidator<int> DiagnosticsChunkSize()
    {
        return new ProfilePropertyValidator<int>(
            "Diagnostics.ChunkSize",
            () => _instance.Diagnostics.ChunkSize!,
            value => _instance.Diagnostics.ChunkSize = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ConfigurationProfiles property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Configuration.ConfigurationProfileOptions> ConfigurationProfiles()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Configuration.ConfigurationProfileOptions>(
            "ConfigurationProfiles",
            () => _instance.ConfigurationProfiles!,
            value => _instance.ConfigurationProfiles = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ConfigurationProfiles.EnabledProfiles property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> ConfigurationProfilesEnabledProfiles()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "ConfigurationProfiles.EnabledProfiles",
            () => _instance.ConfigurationProfiles.EnabledProfiles!,
            value => _instance.ConfigurationProfiles.EnabledProfiles = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ConfigurationProfiles.LogProfileOverrides property.
    /// </summary>
    public ProfilePropertyValidator<bool> ConfigurationProfilesLogProfileOverrides()
    {
        return new ProfilePropertyValidator<bool>(
            "ConfigurationProfiles.LogProfileOverrides",
            () => _instance.ConfigurationProfiles.LogProfileOverrides!,
            value => _instance.ConfigurationProfiles.LogProfileOverrides = value,
            _logger,
            _logOverrides);
    }
}