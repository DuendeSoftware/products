// <auto-generated />
// Copyright (c) Duende Software. All rights reserved.
// See LICENSE in the project root for license information.

#nullable enable

using Microsoft.Extensions.Logging;
using Duende.IdentityServer.Configuration.Profiles;

namespace Duende.IdentityServer.Models;

/// <summary>
/// Auto-generated validator for Client.
/// Provides strongly-typed property accessors for profile validation without reflection.
/// </summary>
public sealed class ClientProfileValidator
{
    private readonly Duende.IdentityServer.Models.Client _instance;
    private readonly ILogger _logger;
    private readonly bool _logOverrides;

    /// <summary>
    /// Initializes a new instance of the <see cref="ClientProfileValidator"/> class.
    /// </summary>
    public ClientProfileValidator(
        Duende.IdentityServer.Models.Client instance,
        ILogger logger,
        bool logOverrides)
    {
        _instance = instance;
        _logger = logger;
        _logOverrides = logOverrides;
    }

    /// <summary>
    /// Gets a validator for the Enabled property.
    /// </summary>
    public ProfilePropertyValidator<bool> Enabled()
    {
        return new ProfilePropertyValidator<bool>(
            "Enabled",
            () => _instance.Enabled!,
            value => _instance.Enabled = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ClientId property.
    /// </summary>
    public ProfilePropertyValidator<string> ClientId()
    {
        return new ProfilePropertyValidator<string>(
            "ClientId",
            () => _instance.ClientId!,
            value => _instance.ClientId = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ProtocolType property.
    /// </summary>
    public ProfilePropertyValidator<string> ProtocolType()
    {
        return new ProfilePropertyValidator<string>(
            "ProtocolType",
            () => _instance.ProtocolType!,
            value => _instance.ProtocolType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ClientSecrets property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<Duende.IdentityServer.Models.Secret>> ClientSecrets()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<Duende.IdentityServer.Models.Secret>>(
            "ClientSecrets",
            () => _instance.ClientSecrets!,
            value => _instance.ClientSecrets = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RequireClientSecret property.
    /// </summary>
    public ProfilePropertyValidator<bool> RequireClientSecret()
    {
        return new ProfilePropertyValidator<bool>(
            "RequireClientSecret",
            () => _instance.RequireClientSecret!,
            value => _instance.RequireClientSecret = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ClientName property.
    /// </summary>
    public ProfilePropertyValidator<string?> ClientName()
    {
        return new ProfilePropertyValidator<string?>(
            "ClientName",
            () => _instance.ClientName!,
            value => _instance.ClientName = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Description property.
    /// </summary>
    public ProfilePropertyValidator<string?> Description()
    {
        return new ProfilePropertyValidator<string?>(
            "Description",
            () => _instance.Description!,
            value => _instance.Description = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ClientUri property.
    /// </summary>
    public ProfilePropertyValidator<string?> ClientUri()
    {
        return new ProfilePropertyValidator<string?>(
            "ClientUri",
            () => _instance.ClientUri!,
            value => _instance.ClientUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the LogoUri property.
    /// </summary>
    public ProfilePropertyValidator<string?> LogoUri()
    {
        return new ProfilePropertyValidator<string?>(
            "LogoUri",
            () => _instance.LogoUri!,
            value => _instance.LogoUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RequireConsent property.
    /// </summary>
    public ProfilePropertyValidator<bool> RequireConsent()
    {
        return new ProfilePropertyValidator<bool>(
            "RequireConsent",
            () => _instance.RequireConsent!,
            value => _instance.RequireConsent = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowRememberConsent property.
    /// </summary>
    public ProfilePropertyValidator<bool> AllowRememberConsent()
    {
        return new ProfilePropertyValidator<bool>(
            "AllowRememberConsent",
            () => _instance.AllowRememberConsent!,
            value => _instance.AllowRememberConsent = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowedGrantTypes property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> AllowedGrantTypes()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "AllowedGrantTypes",
            () => _instance.AllowedGrantTypes!,
            value => _instance.AllowedGrantTypes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RequirePkce property.
    /// </summary>
    public ProfilePropertyValidator<bool> RequirePkce()
    {
        return new ProfilePropertyValidator<bool>(
            "RequirePkce",
            () => _instance.RequirePkce!,
            value => _instance.RequirePkce = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowPlainTextPkce property.
    /// </summary>
    public ProfilePropertyValidator<bool> AllowPlainTextPkce()
    {
        return new ProfilePropertyValidator<bool>(
            "AllowPlainTextPkce",
            () => _instance.AllowPlainTextPkce!,
            value => _instance.AllowPlainTextPkce = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RequireRequestObject property.
    /// </summary>
    public ProfilePropertyValidator<bool> RequireRequestObject()
    {
        return new ProfilePropertyValidator<bool>(
            "RequireRequestObject",
            () => _instance.RequireRequestObject!,
            value => _instance.RequireRequestObject = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowAccessTokensViaBrowser property.
    /// </summary>
    public ProfilePropertyValidator<bool> AllowAccessTokensViaBrowser()
    {
        return new ProfilePropertyValidator<bool>(
            "AllowAccessTokensViaBrowser",
            () => _instance.AllowAccessTokensViaBrowser!,
            value => _instance.AllowAccessTokensViaBrowser = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RequireDPoP property.
    /// </summary>
    public ProfilePropertyValidator<bool> RequireDPoP()
    {
        return new ProfilePropertyValidator<bool>(
            "RequireDPoP",
            () => _instance.RequireDPoP!,
            value => _instance.RequireDPoP = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DPoPValidationMode property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Models.DPoPTokenExpirationValidationMode> DPoPValidationMode()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Models.DPoPTokenExpirationValidationMode>(
            "DPoPValidationMode",
            () => _instance.DPoPValidationMode!,
            value => _instance.DPoPValidationMode = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DPoPClockSkew property.
    /// </summary>
    public ProfilePropertyValidator<System.TimeSpan> DPoPClockSkew()
    {
        return new ProfilePropertyValidator<System.TimeSpan>(
            "DPoPClockSkew",
            () => _instance.DPoPClockSkew!,
            value => _instance.DPoPClockSkew = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RedirectUris property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> RedirectUris()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "RedirectUris",
            () => _instance.RedirectUris!,
            value => _instance.RedirectUris = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PostLogoutRedirectUris property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> PostLogoutRedirectUris()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "PostLogoutRedirectUris",
            () => _instance.PostLogoutRedirectUris!,
            value => _instance.PostLogoutRedirectUris = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the FrontChannelLogoutUri property.
    /// </summary>
    public ProfilePropertyValidator<string?> FrontChannelLogoutUri()
    {
        return new ProfilePropertyValidator<string?>(
            "FrontChannelLogoutUri",
            () => _instance.FrontChannelLogoutUri!,
            value => _instance.FrontChannelLogoutUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the FrontChannelLogoutSessionRequired property.
    /// </summary>
    public ProfilePropertyValidator<bool> FrontChannelLogoutSessionRequired()
    {
        return new ProfilePropertyValidator<bool>(
            "FrontChannelLogoutSessionRequired",
            () => _instance.FrontChannelLogoutSessionRequired!,
            value => _instance.FrontChannelLogoutSessionRequired = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the BackChannelLogoutUri property.
    /// </summary>
    public ProfilePropertyValidator<string?> BackChannelLogoutUri()
    {
        return new ProfilePropertyValidator<string?>(
            "BackChannelLogoutUri",
            () => _instance.BackChannelLogoutUri!,
            value => _instance.BackChannelLogoutUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the BackChannelLogoutSessionRequired property.
    /// </summary>
    public ProfilePropertyValidator<bool> BackChannelLogoutSessionRequired()
    {
        return new ProfilePropertyValidator<bool>(
            "BackChannelLogoutSessionRequired",
            () => _instance.BackChannelLogoutSessionRequired!,
            value => _instance.BackChannelLogoutSessionRequired = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowOfflineAccess property.
    /// </summary>
    public ProfilePropertyValidator<bool> AllowOfflineAccess()
    {
        return new ProfilePropertyValidator<bool>(
            "AllowOfflineAccess",
            () => _instance.AllowOfflineAccess!,
            value => _instance.AllowOfflineAccess = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowedScopes property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> AllowedScopes()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "AllowedScopes",
            () => _instance.AllowedScopes!,
            value => _instance.AllowedScopes = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AlwaysIncludeUserClaimsInIdToken property.
    /// </summary>
    public ProfilePropertyValidator<bool> AlwaysIncludeUserClaimsInIdToken()
    {
        return new ProfilePropertyValidator<bool>(
            "AlwaysIncludeUserClaimsInIdToken",
            () => _instance.AlwaysIncludeUserClaimsInIdToken!,
            value => _instance.AlwaysIncludeUserClaimsInIdToken = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the IdentityTokenLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> IdentityTokenLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "IdentityTokenLifetime",
            () => _instance.IdentityTokenLifetime!,
            value => _instance.IdentityTokenLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowedIdentityTokenSigningAlgorithms property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> AllowedIdentityTokenSigningAlgorithms()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "AllowedIdentityTokenSigningAlgorithms",
            () => _instance.AllowedIdentityTokenSigningAlgorithms!,
            value => _instance.AllowedIdentityTokenSigningAlgorithms = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AccessTokenLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> AccessTokenLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "AccessTokenLifetime",
            () => _instance.AccessTokenLifetime!,
            value => _instance.AccessTokenLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AuthorizationCodeLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> AuthorizationCodeLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "AuthorizationCodeLifetime",
            () => _instance.AuthorizationCodeLifetime!,
            value => _instance.AuthorizationCodeLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AbsoluteRefreshTokenLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> AbsoluteRefreshTokenLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "AbsoluteRefreshTokenLifetime",
            () => _instance.AbsoluteRefreshTokenLifetime!,
            value => _instance.AbsoluteRefreshTokenLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the SlidingRefreshTokenLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> SlidingRefreshTokenLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "SlidingRefreshTokenLifetime",
            () => _instance.SlidingRefreshTokenLifetime!,
            value => _instance.SlidingRefreshTokenLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ConsentLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int?> ConsentLifetime()
    {
        return new ProfilePropertyValidator<int?>(
            "ConsentLifetime",
            () => _instance.ConsentLifetime!,
            value => _instance.ConsentLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PushedAuthorizationLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int?> PushedAuthorizationLifetime()
    {
        return new ProfilePropertyValidator<int?>(
            "PushedAuthorizationLifetime",
            () => _instance.PushedAuthorizationLifetime!,
            value => _instance.PushedAuthorizationLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RequirePushedAuthorization property.
    /// </summary>
    public ProfilePropertyValidator<bool> RequirePushedAuthorization()
    {
        return new ProfilePropertyValidator<bool>(
            "RequirePushedAuthorization",
            () => _instance.RequirePushedAuthorization!,
            value => _instance.RequirePushedAuthorization = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RefreshTokenUsage property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Models.TokenUsage> RefreshTokenUsage()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Models.TokenUsage>(
            "RefreshTokenUsage",
            () => _instance.RefreshTokenUsage!,
            value => _instance.RefreshTokenUsage = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UpdateAccessTokenClaimsOnRefresh property.
    /// </summary>
    public ProfilePropertyValidator<bool> UpdateAccessTokenClaimsOnRefresh()
    {
        return new ProfilePropertyValidator<bool>(
            "UpdateAccessTokenClaimsOnRefresh",
            () => _instance.UpdateAccessTokenClaimsOnRefresh!,
            value => _instance.UpdateAccessTokenClaimsOnRefresh = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the RefreshTokenExpiration property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Models.TokenExpiration> RefreshTokenExpiration()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Models.TokenExpiration>(
            "RefreshTokenExpiration",
            () => _instance.RefreshTokenExpiration!,
            value => _instance.RefreshTokenExpiration = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AccessTokenType property.
    /// </summary>
    public ProfilePropertyValidator<Duende.IdentityServer.Models.AccessTokenType> AccessTokenType()
    {
        return new ProfilePropertyValidator<Duende.IdentityServer.Models.AccessTokenType>(
            "AccessTokenType",
            () => _instance.AccessTokenType!,
            value => _instance.AccessTokenType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the EnableLocalLogin property.
    /// </summary>
    public ProfilePropertyValidator<bool> EnableLocalLogin()
    {
        return new ProfilePropertyValidator<bool>(
            "EnableLocalLogin",
            () => _instance.EnableLocalLogin!,
            value => _instance.EnableLocalLogin = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the IdentityProviderRestrictions property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> IdentityProviderRestrictions()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "IdentityProviderRestrictions",
            () => _instance.IdentityProviderRestrictions!,
            value => _instance.IdentityProviderRestrictions = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the IncludeJwtId property.
    /// </summary>
    public ProfilePropertyValidator<bool> IncludeJwtId()
    {
        return new ProfilePropertyValidator<bool>(
            "IncludeJwtId",
            () => _instance.IncludeJwtId!,
            value => _instance.IncludeJwtId = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Claims property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<Duende.IdentityServer.Models.ClientClaim>> Claims()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<Duende.IdentityServer.Models.ClientClaim>>(
            "Claims",
            () => _instance.Claims!,
            value => _instance.Claims = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AlwaysSendClientClaims property.
    /// </summary>
    public ProfilePropertyValidator<bool> AlwaysSendClientClaims()
    {
        return new ProfilePropertyValidator<bool>(
            "AlwaysSendClientClaims",
            () => _instance.AlwaysSendClientClaims!,
            value => _instance.AlwaysSendClientClaims = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the ClientClaimsPrefix property.
    /// </summary>
    public ProfilePropertyValidator<string?> ClientClaimsPrefix()
    {
        return new ProfilePropertyValidator<string?>(
            "ClientClaimsPrefix",
            () => _instance.ClientClaimsPrefix!,
            value => _instance.ClientClaimsPrefix = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PairWiseSubjectSalt property.
    /// </summary>
    public ProfilePropertyValidator<string?> PairWiseSubjectSalt()
    {
        return new ProfilePropertyValidator<string?>(
            "PairWiseSubjectSalt",
            () => _instance.PairWiseSubjectSalt!,
            value => _instance.PairWiseSubjectSalt = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserSsoLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int?> UserSsoLifetime()
    {
        return new ProfilePropertyValidator<int?>(
            "UserSsoLifetime",
            () => _instance.UserSsoLifetime!,
            value => _instance.UserSsoLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the UserCodeType property.
    /// </summary>
    public ProfilePropertyValidator<string?> UserCodeType()
    {
        return new ProfilePropertyValidator<string?>(
            "UserCodeType",
            () => _instance.UserCodeType!,
            value => _instance.UserCodeType = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the DeviceCodeLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int> DeviceCodeLifetime()
    {
        return new ProfilePropertyValidator<int>(
            "DeviceCodeLifetime",
            () => _instance.DeviceCodeLifetime!,
            value => _instance.DeviceCodeLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the CibaLifetime property.
    /// </summary>
    public ProfilePropertyValidator<int?> CibaLifetime()
    {
        return new ProfilePropertyValidator<int?>(
            "CibaLifetime",
            () => _instance.CibaLifetime!,
            value => _instance.CibaLifetime = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the PollingInterval property.
    /// </summary>
    public ProfilePropertyValidator<int?> PollingInterval()
    {
        return new ProfilePropertyValidator<int?>(
            "PollingInterval",
            () => _instance.PollingInterval!,
            value => _instance.PollingInterval = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the CoordinateLifetimeWithUserSession property.
    /// </summary>
    public ProfilePropertyValidator<bool?> CoordinateLifetimeWithUserSession()
    {
        return new ProfilePropertyValidator<bool?>(
            "CoordinateLifetimeWithUserSession",
            () => _instance.CoordinateLifetimeWithUserSession!,
            value => _instance.CoordinateLifetimeWithUserSession = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the AllowedCorsOrigins property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.ICollection<string>> AllowedCorsOrigins()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.ICollection<string>>(
            "AllowedCorsOrigins",
            () => _instance.AllowedCorsOrigins!,
            value => _instance.AllowedCorsOrigins = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the InitiateLoginUri property.
    /// </summary>
    public ProfilePropertyValidator<string?> InitiateLoginUri()
    {
        return new ProfilePropertyValidator<string?>(
            "InitiateLoginUri",
            () => _instance.InitiateLoginUri!,
            value => _instance.InitiateLoginUri = value,
            _logger,
            _logOverrides);
    }
    /// <summary>
    /// Gets a validator for the Properties property.
    /// </summary>
    public ProfilePropertyValidator<System.Collections.Generic.IDictionary<string, string>> Properties()
    {
        return new ProfilePropertyValidator<System.Collections.Generic.IDictionary<string, string>>(
            "Properties",
            () => _instance.Properties!,
            value => _instance.Properties = value,
            _logger,
            _logOverrides);
    }
}