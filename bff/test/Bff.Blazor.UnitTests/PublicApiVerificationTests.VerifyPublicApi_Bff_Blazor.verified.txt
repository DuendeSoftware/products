namespace Duende.Bff.Blazor
{
    public class AddServerManagementClaimsTransform : Microsoft.AspNetCore.Authentication.IClaimsTransformation
    {
        public AddServerManagementClaimsTransform(Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor, Microsoft.Extensions.Options.IOptionsMonitor<Duende.Bff.BffOptions> options) { }
        public System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal> TransformAsync(System.Security.Claims.ClaimsPrincipal principal) { }
    }
    public class BffBlazorServerOptions
    {
        public BffBlazorServerOptions() { }
        public int ServerStateProviderPollingInterval { get; set; }
    }
    public static class BffBuilderExtensions
    {
        public static Microsoft.AspNetCore.Builder.BffBuilder AddBlazorServer(this Microsoft.AspNetCore.Builder.BffBuilder builder, System.Action<Duende.Bff.Blazor.BffBlazorServerOptions>? configureOptions = null) { }
    }
    public sealed class BffServerAuthenticationStateProvider : Microsoft.AspNetCore.Components.Server.RevalidatingServerAuthenticationStateProvider, System.IDisposable
    {
        public BffServerAuthenticationStateProvider(Duende.Bff.IUserSessionStore sessionStore, Microsoft.AspNetCore.Components.PersistentComponentState persistentComponentState, Microsoft.AspNetCore.Components.NavigationManager navigation, Microsoft.Extensions.Options.IOptions<Duende.Bff.Blazor.BffBlazorServerOptions> blazorOptions, Microsoft.Extensions.Options.IOptions<Duende.Bff.BffOptions> bffOptions, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }
        protected override System.TimeSpan RevalidationInterval { get; }
        public void Dispose() { }
        protected override System.Threading.Tasks.Task<bool> ValidateAuthenticationStateAsync(Microsoft.AspNetCore.Components.Authorization.AuthenticationState authenticationState, System.Threading.CancellationToken cancellationToken) { }
    }
    public class ServerSideTokenStore : Duende.AccessTokenManagement.OpenIdConnect.IUserTokenStore
    {
        public ServerSideTokenStore(Duende.AccessTokenManagement.OpenIdConnect.IStoreTokensInAuthenticationProperties tokensInAuthProperties, Duende.Bff.IUserSessionStore sessionStore, Microsoft.AspNetCore.DataProtection.IDataProtectionProvider dataProtectionProvider, Microsoft.Extensions.Logging.ILogger<Duende.Bff.Blazor.ServerSideTokenStore> logger, Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider authenticationStateProvider) { }
        public System.Threading.Tasks.Task ClearTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null) { }
        public System.Threading.Tasks.Task<Duende.AccessTokenManagement.OpenIdConnect.UserToken> GetTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null) { }
        public System.Threading.Tasks.Task StoreTokenAsync(System.Security.Claims.ClaimsPrincipal user, Duende.AccessTokenManagement.OpenIdConnect.UserToken token, Duende.AccessTokenManagement.OpenIdConnect.UserTokenRequestParameters? parameters = null) { }
        protected System.Threading.Tasks.Task UpdateTicket(System.Security.Claims.ClaimsPrincipal user, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationTicket> updateAction) { }
    }
}