namespace Duende.Bff.EntityFramework
{
    public interface ISessionDbContext
    {
        Microsoft.EntityFrameworkCore.DbSet<Duende.Bff.EntityFramework.UserSessionEntity> UserSessions { get; set; }
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }
    public static class ModelBuilderExtensions
    {
        public static void ConfigureSessionContext(this Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder, Duende.Bff.EntityFramework.SessionStoreOptions storeOptions) { }
    }
    public class SessionDbContext : Duende.Bff.EntityFramework.SessionDbContext<Duende.Bff.EntityFramework.SessionDbContext>
    {
        public SessionDbContext(Microsoft.EntityFrameworkCore.DbContextOptions<Duende.Bff.EntityFramework.SessionDbContext> options) { }
    }
    public class SessionDbContext<TContext> : Microsoft.EntityFrameworkCore.DbContext, Duende.Bff.EntityFramework.ISessionDbContext
        where TContext : Microsoft.EntityFrameworkCore.DbContext, Duende.Bff.EntityFramework.ISessionDbContext
    {
        public SessionDbContext(Microsoft.EntityFrameworkCore.DbContextOptions<TContext> options) { }
        public Duende.Bff.EntityFramework.SessionStoreOptions? StoreOptions { get; set; }
        public Microsoft.EntityFrameworkCore.DbSet<Duende.Bff.EntityFramework.UserSessionEntity> UserSessions { get; set; }
        protected virtual void ConfigureSchema(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder) { }
        protected override void OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder modelBuilder) { }
    }
    public class SessionStoreOptions
    {
        public SessionStoreOptions() { }
        public string? DefaultSchema { get; set; }
        public Duende.Bff.EntityFramework.TableConfiguration UserSessions { get; set; }
    }
    public class TableConfiguration
    {
        public TableConfiguration(string name) { }
        public TableConfiguration(string name, string schema) { }
        public string Name { get; set; }
        public string? Schema { get; set; }
    }
    public class UserSessionEntity : Duende.Bff.UserSession
    {
        public UserSessionEntity() { }
        public string? ApplicationName { get; set; }
        public long Id { get; set; }
    }
    public class UserSessionStore : Duende.Bff.IUserSessionStore, Duende.Bff.IUserSessionStoreCleanup
    {
        public UserSessionStore(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.DataProtection.DataProtectionOptions> options, Duende.Bff.EntityFramework.ISessionDbContext sessionDbContext, Microsoft.Extensions.Logging.ILogger<Duende.Bff.EntityFramework.UserSessionStore> logger) { }
        public System.Threading.Tasks.Task CreateUserSessionAsync(Duende.Bff.UserSession session, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task DeleteExpiredSessionsAsync(System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task DeleteUserSessionAsync(string key, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task DeleteUserSessionsAsync(Duende.Bff.UserSessionsFilter filter, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<Duende.Bff.UserSession?> GetUserSessionAsync(string key, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Duende.Bff.UserSession>> GetUserSessionsAsync(Duende.Bff.UserSessionsFilter filter, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.Tasks.Task UpdateUserSessionAsync(string key, Duende.Bff.UserSessionUpdate session, System.Threading.CancellationToken cancellationToken) { }
    }
}